Time Complexity: O(nlogk); k being size of the heap
Space Complexity: O(n)
Approach: To solve the problem maintain a priorityqueue. 
1->2->3->4
5->6->7->8
1->3->5
Take all the elements at position1(1,1,1) and add them to priorityqueue initially. When an elemnt is added to pq always it is 
heapified with a time complexity of O(log K) with K being size of the heap. 
When an element is polled out of priorityqueue add its next element, in this scenario it is 2. 
When an element is polled from the priority queue it is always a minimum value because pq is a minheap(sorted in ascending order).
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val; 
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * } 
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        PriorityQueue<ListNode> pq = new PriorityQueue<>((a,b)->a.val-b.val);    
        ListNode result=new ListNode(-1);
        ListNode dummy=result;

        for(ListNode node: lists){
            if(node!=null){
                pq.add(node);
            }            
        }

        while(!pq.isEmpty()){   
            ListNode currValue=pq.poll();   
            dummy.next=currValue;
            dummy=dummy.next;          
            currValue=currValue.next;
            if(currValue!=null)        
                pq.add(currValue);             
        }

        return result.next;        
    }
}